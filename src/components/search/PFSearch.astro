---

---

<site-search>
  <aside class='form my-4'>
    {
      import.meta.env.DEV ? (
        <div class='w-full rounded-xl border-2 bg-transparent px-4 py-2 pe-3 outline-none focus:border-foreground'>
          You are in Dev mode, the search is disabled.
        </div>
      ) : (
        <div id='site-search' />
      )
    }
  </aside>
</site-search>

<script>
  class SiteSearch extends HTMLElement {
    private initialized = false

    constructor() {
      super()
      this.setupLazyLoading()
    }

    private setupLazyLoading() {
      const formatURL = (path: string) => path.replace(/(.)\/(#.*)?$/, '$1$2')

      const initializeSearch = async () => {
        if (this.initialized || import.meta.env.DEV) return
        this.initialized = true

        try {
          // Load CSS dynamically
          await import('@pagefind/default-ui/css/ui.css')

          // Load search UI
          // @ts-expect-error â€” Missing types for @pagefind/default-ui package.
          const { PagefindUI } = await import('@pagefind/default-ui')
          new PagefindUI({
            element: '#site-search',
            baseUrl: import.meta.env.BASE_URL,
            bundlePath: import.meta.env.BASE_URL.replace(/\/$/, '') + '/pagefind/',
            showImages: false,
            showSubResults: true,
            processResult: (result: { url: string; sub_results: Array<{ url: string }> }) => {
              result.url = formatURL(result.url)
              result.sub_results = result.sub_results.map((sub_result) => {
                sub_result.url = formatURL(sub_result.url)
                return sub_result
              })
            }
          })
        } catch (error) {
          console.error('Failed to load search UI:', error)
        }
      }

      // Use intersection observer for better performance
      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              observer.disconnect()
              const onIdle = window.requestIdleCallback || ((cb) => setTimeout(cb, 1))
              onIdle(initializeSearch)
            }
          })
        },
        { rootMargin: '100px' }
      )

      // Start observing when DOM is ready
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
          const searchElement = document.getElementById('site-search')
          if (searchElement) observer.observe(searchElement)
        })
      } else {
        const searchElement = document.getElementById('site-search')
        if (searchElement) observer.observe(searchElement)
      }
    }
  }
  customElements.define('site-search', SiteSearch)
</script>

<style>
  #site-search {
    --pagefind-ui-scale: 0.8;
    --pagefind-ui-primary: hsl(var(--primary) / var(--un-bg-opacity, 1));
    --pagefind-ui-text: hsl(var(--foreground) / var(--un-text-opacity, 1));
    --pagefind-ui-background: hsl(var(--muted) / var(--un-bg-opacity, 1));
    --pagefind-ui-border: hsl(var(--border) / var(--un-border-opacity, 1));
    --pagefind-ui-tag: hsl(var(--muted-foreground) / var(--un-text-opacity, 1));
    --pagefind-ui-border-width: 2px;
    --pagefind-ui-border-radius: calc(var(--radius) + 2px);
    --pagefind-ui-image-border-radius: calc(var(--radius) + 2px);
    --pagefind-ui-image-box-ratio: 3 / 2;
    --pagefind-ui-font: sans-serif;
  }
</style>
