---

---

<search-modal data-pagefind-ignore='all' id='search-modal' class='fixed inset-0 z-[9999] hidden'>
  {/* Backdrop */}
  <div class='absolute inset-0 bg-black/50 backdrop-blur-sm' id='search-backdrop'></div>

  {/* Modal Content */}
  <div class='relative flex min-h-full items-start justify-center p-4 pt-[10vh]'>
    <div
      class='w-full max-w-2xl bg-background rounded-xl border border-border shadow-2xl overflow-hidden'
    >
      <div class='flex items-center gap-3 p-4 border-b border-border'>
        <span class='i-mingcute:search-2-line text-muted-foreground flex-shrink-0'></span>
        <input
          type='text'
          id='modal-search-input'
          placeholder='Search...'
          class='flex-1 bg-transparent text-foreground placeholder:text-muted-foreground focus:outline-none text-lg'
          autocomplete='off'
        />
        <button
          id='clear-search-button'
          class='text-muted-foreground hover:text-foreground p-1 rounded-md hover:bg-muted transition-colors hidden'
          title='Clear search'
        >
          <span class='sr-only'>Clear</span>
          <span class='i-mingcute:close-line text-sm'></span>
        </button>
      </div>

      {/* Search Results */}
      <div class='max-h-[60vh] overflow-y-auto' id='search-results-container'>
        {
          import.meta.env.DEV ? (
            <div class='p-8 text-center'>
              <div class='w-full rounded-xl border-2 bg-transparent px-4 py-2 pe-3 outline-none border-yellow-500 bg-yellow-50 dark:bg-yellow-900/20 text-yellow-800 dark:text-yellow-200'>
                <div class='font-medium mb-1'>Development Mode</div>
                <div class='text-sm'>
                  Pagefind search is disabled. Restart using{' '}
                  <code class='p-0.5 bg-yellow-200 dark:bg-yellow-800 rounded'>
                    pnpm dev:search
                  </code>
                  command.
                </div>
              </div>
            </div>
          ) : (
            <>
              <div id='modal-search-loading' class='p-8 text-center text-muted-foreground hidden'>
                <div>Searching...</div>
              </div>

              <div
                id='modal-search-no-results'
                class='p-8 text-center text-muted-foreground hidden'
              >
                <div>No results found</div>
              </div>

              <div id='modal-search-results-list' />

              <div id='modal-search-empty' class='p-8 text-center text-muted-foreground'>
                <div>Start typing to search...</div>
              </div>
            </>
          )
        }
      </div>

      {/* Footer with instructions */}
      <div
        class='px-4 py-3 border-t border-border bg-muted/30 text-xs text-muted-foreground text-center'
      >
        <kbd class='px-1.5 py-0.5 bg-background border border-border rounded text-xs font-mono'
          >Enter</kbd
        > to search,
        <kbd class='px-1.5 py-0.5 bg-background border border-border rounded text-xs font-mono'
          >Esc</kbd
        > to close
      </div>
    </div>
  </div>
</search-modal>

<script is:inline src='/pagefind/pagefind-ui.js'></script>

<script>
  import type {
    PagefindInstance,
    ProcessedSearchResult,
    SearchModalElements,
    SearchState
  } from '@/types/search'
  import { useMagicKeys } from '@/utils/keyboard'

  // Type declarations for global objects
  declare global {
    interface Window {
      pagefind?: PagefindInstance
      openSearchModal?: () => void
    }
  }

  class SearchModal extends HTMLElement {
    private searchTimeout: number | null = null
    private modal: HTMLElement | null = null
    private input: HTMLInputElement | null = null
    private pagefindLoaded: boolean = false
    private keyboardHandler = useMagicKeys()

    constructor() {
      super()
    }

    async connectedCallback() {
      this.modal = document.getElementById('search-modal')
      this.input = document.getElementById('modal-search-input') as HTMLInputElement
      this.setupModalControls()
      this.setupKeyboardShortcuts()
      this.setupEventListeners()
      this.setupClearButton()

      // Only initialize pagefind in production
      if (!import.meta.env.DEV) {
        await this.initializePagefind()
      }
    }

    disconnectedCallback() {
      // Clean up keyboard handler
      this.keyboardHandler.destroy()
    }

    private async initializePagefind() {
      if (this.pagefindLoaded || window.pagefind) return

      try {
        // Try to load pagefind via script tag since dynamic imports can cause build issues
        await this.loadPagefindScript()
        this.pagefindLoaded = true
      } catch (error) {
        // In astro development, pagefind files may not exist yet
        if (import.meta.env?.DEV) {
          console.warn(
            'Pagefind not available in development mode - search will be disabled until build is run'
          )
          return
        }

        console.error('Failed to initialize pagefind:', error)
      }
    }

    private async loadPagefindScript() {
      return new Promise<void>((resolve, reject) => {
        // Check if script already exists
        if (document.querySelector('script[src="/pagefind/pagefind.js"]')) {
          resolve()
          return
        }

        const script = document.createElement('script')
        script.src = '/pagefind/pagefind.js'
        script.type = 'module'

        script.onload = async () => {
          try {
            // Wait for pagefind to be available
            let attempts = 0
            const maxAttempts = 100

            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            while (!(window as any).pagefind && attempts < maxAttempts) {
              await new Promise((resolve) => setTimeout(resolve, 50))
              attempts++
            }

            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            if ((window as any).pagefind) {
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              window.pagefind = (window as any).pagefind
              if (window.pagefind) {
                await window.pagefind.init()
                this.pagefindLoaded = true
                resolve()
              } else {
                reject(new Error('Pagefind reference issue'))
              }
            } else {
              reject(new Error('Pagefind still not available after script load'))
            }
          } catch (error) {
            reject(error)
          }
        }

        script.onerror = reject
        document.head.appendChild(script)
      })
    }

    private setupEventListeners() {
      if (!this.input) return

      this.input.addEventListener('input', (e) => {
        const query = (e.target as HTMLInputElement).value.trim()
        this.handleSearch(query)
        this.updateClearButtonVisibility()
      })

      this.input.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
          this.closeModal()
        }
      })
    }

    private setupModalControls() {
      if (!this.modal) return

      // Close on backdrop click
      const backdrop = document.getElementById('search-backdrop')
      backdrop?.addEventListener('click', () => this.closeModal())

      // Prevent modal content clicks from propagating to backdrop
      const modalContent = this.modal.querySelector('.bg-background')
      modalContent?.addEventListener('click', (e) => {
        e.stopPropagation()
      })

      // Also handle clicks on the modal wrapper (outside content but inside modal)
      const modalWrapper = this.modal.querySelector('.relative')
      modalWrapper?.addEventListener('click', (e) => {
        if (e.target === modalWrapper) {
          this.closeModal()
        }
      })
    }

    private setupClearButton() {
      const clearButton = document.getElementById('clear-search-button')
      if (clearButton) {
        clearButton.addEventListener('click', () => {
          if (this.input) {
            this.input.value = ''
            this.input.focus()
            this.setSearchState('empty')
            this.updateClearButtonVisibility()
          }
        })
      }
    }

    private updateClearButtonVisibility() {
      const clearButton = document.getElementById('clear-search-button')
      if (clearButton && this.input) {
        if (this.input.value.trim()) {
          clearButton.classList.remove('hidden')
        } else {
          clearButton.classList.add('hidden')
        }
      }
    }

    private setupKeyboardShortcuts() {
      // Register global keyboard shortcuts
      this.keyboardHandler.register('cmd+k', () => this.openModal())
      this.keyboardHandler.register('ctrl+k', () => this.openModal())
      this.keyboardHandler.register('escape', () => {
        if (!this.modal?.classList.contains('hidden')) {
          this.closeModal()
        }
      })
    }

    public openModal() {
      if (!this.modal) return

      this.modal.classList.remove('hidden')
      this.input?.focus()
      document.body.style.overflow = 'hidden'
    }

    public closeModal() {
      if (!this.modal) return

      this.modal.classList.add('hidden')
      document.body.style.overflow = ''
      if (this.input) {
        this.input.value = ''
        this.setSearchState('empty')
        this.updateClearButtonVisibility()
      }
    }

    private getSearchElements(): SearchModalElements {
      return {
        loading: document.getElementById('modal-search-loading'),
        noResults: document.getElementById('modal-search-no-results'),
        resultsList: document.getElementById('modal-search-results-list'),
        empty: document.getElementById('modal-search-empty')
      }
    }

    private setSearchState(state: SearchState) {
      const elements = this.getSearchElements()

      // Hide all states first
      elements.loading?.classList.add('hidden')
      elements.noResults?.classList.add('hidden')
      elements.empty?.classList.add('hidden')

      // Clear results
      if (elements.resultsList) {
        elements.resultsList.innerHTML = ''
      }

      // Show the requested state
      switch (state) {
        case 'loading':
          elements.loading?.classList.remove('hidden')
          break
        case 'no-results':
          elements.noResults?.classList.remove('hidden')
          break
        case 'empty':
          elements.empty?.classList.remove('hidden')
          break
        // 'results' state shows nothing initially, results are added to resultsList
      }
    }

    private async handleSearch(query: string) {
      // Skip search in development mode
      if (import.meta.env.DEV) {
        return
      }

      // Clear previous timeout
      if (this.searchTimeout) {
        clearTimeout(this.searchTimeout)
      }

      if (!query) {
        this.setSearchState('empty')
        return
      }

      // Show loading state immediately
      this.setSearchState('loading')

      // Preload search while user types
      if (window.pagefind) {
        try {
          await window.pagefind.preload(query)
        } catch (error) {
          console.warn('Preload failed:', error)
        }
      }

      // Debounce search
      this.searchTimeout = window.setTimeout(async () => {
        await this.performSearch(query)
      }, 150)
    }

    private async performSearch(query: string) {
      if (!window.pagefind) {
        await this.initializePagefind()
        if (!window.pagefind) {
          this.setSearchState('no-results')
          return
        }
      }

      try {
        // Use debouncedSearch for better performance
        const searchResults = await window.pagefind.debouncedSearch(query, {
          sort: { date: 'desc' }
        })

        if (!searchResults || searchResults.results.length === 0) {
          this.setSearchState('no-results')
          return
        }

        // Set to results state
        this.setSearchState('results')

        // Process and display results (show up to 10 results)
        const resultData: ProcessedSearchResult[] = await Promise.all(
          searchResults.results.slice(0, 10).map(async (result) => {
            const data = await result.data()
            return {
              url: this.formatURL(data.url),
              title: data.meta?.title || 'Untitled',
              excerpt: data.excerpt || '',
              date: data.date,
              score: result.score,
              words: result.words
            }
          })
        )

        this.renderResults(resultData, query)
      } catch (error) {
        console.error('Search failed:', error)
        this.setSearchState('no-results')
      }
    }

    private renderResults(results: ProcessedSearchResult[], query: string) {
      const elements = this.getSearchElements()
      if (!elements.resultsList) return

      // Clear previous results
      elements.resultsList.innerHTML = ''

      // Create search result elements
      results.forEach((result, index) => {
        const resultDiv = this.createSearchResultElement(result, query, index)
        if (elements.resultsList) {
          elements.resultsList.appendChild(resultDiv)
        }
      })
    }

    private createSearchResultElement(
      result: ProcessedSearchResult,
      query: string,
      index: number
    ): HTMLElement {
      // Create the main container
      const resultDiv = document.createElement('div')
      resultDiv.className =
        'search-result block p-4 hover:bg-muted transition-colors border-b border-border last:border-b-0 cursor-pointer'
      resultDiv.setAttribute('data-index', index.toString())
      resultDiv.setAttribute('data-url', result.url)

      // Create the header section
      const headerDiv = document.createElement('div')
      headerDiv.className = 'flex items-start justify-between mb-2'

      const titleDiv = document.createElement('div')
      titleDiv.className = 'font-medium text-foreground hover:text-primary line-clamp-1'
      titleDiv.innerHTML = this.highlightQuery(result.title, query)
      headerDiv.appendChild(titleDiv)

      if (result.date) {
        const dateDiv = document.createElement('div')
        dateDiv.className = 'text-xs text-muted-foreground ml-2 flex-shrink-0'
        dateDiv.textContent = new Date(result.date).toLocaleDateString()
        headerDiv.appendChild(dateDiv)
      }

      resultDiv.appendChild(headerDiv)

      // Create the excerpt section
      const excerptDiv = document.createElement('div')
      excerptDiv.className = 'text-sm text-muted-foreground line-clamp-2 mb-2'
      excerptDiv.innerHTML = this.highlightQuery(result.excerpt, query)
      resultDiv.appendChild(excerptDiv)

      // Create the footer section
      const footerDiv = document.createElement('div')
      footerDiv.className = 'flex items-center gap-2'

      const urlSpan = document.createElement('span')
      urlSpan.className = 'text-xs text-muted-foreground/70'
      urlSpan.textContent = this.formatURL(result.url)
      footerDiv.appendChild(urlSpan)

      const separatorSpan = document.createElement('span')
      separatorSpan.className = 'text-xs text-muted-foreground/70'
      separatorSpan.textContent = '•'
      footerDiv.appendChild(separatorSpan)

      const wordsSpan = document.createElement('span')
      wordsSpan.className = 'text-xs text-muted-foreground/70'
      wordsSpan.textContent = `${result.words?.length || 0} words`
      footerDiv.appendChild(wordsSpan)

      resultDiv.appendChild(footerDiv)

      // Add event listeners
      resultDiv.addEventListener('click', () => {
        window.location.href = result.url
        this.closeModal()
      })

      return resultDiv
    }

    private highlightQuery(text: string, query: string): string {
      if (!text || !query) return text

      const regex = new RegExp(`(${query.split(' ').filter(Boolean).join('|')})`, 'gi')
      return text.replace(regex, '<mark>$1</mark>')
    }

    private formatURL(path: string): string {
      return path.replace(/(.)\/(#.*)?$/, '$1$2')
    }
  }

  customElements.define('search-modal', SearchModal)

  // Global function to open search modal
  window.openSearchModal = () => {
    const searchModal = document.querySelector('search-modal') as SearchModal
    searchModal?.openModal()
  }
</script>

<style>
  .search-result:hover {
    background-color: var(--color-muted);
  }

  /* Line clamp utilities for search results */
  .line-clamp-1 {
    display: -webkit-box;
    -webkit-line-clamp: 1;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  /* Override pagefind's default highlight styling */
  mark,
  .search-result mark {
    background: hsl(var(--primary) / 0.2) !important;
    color: hsl(var(--primary-foreground)) !important;
    padding: 0.125rem 0.25rem;
    border-radius: 0.25rem;
    border: none;
  }

  @media (prefers-color-scheme: dark) {
    mark,
    .search-result mark {
      background: hsl(var(--primary) / 0.3) !important;
      color: hsl(var(--primary-foreground)) !important;
    }
  }

  /* Modal animations */
  search-modal {
    animation: fadeIn 0.2s ease-out;
  }

  search-modal.hidden {
    animation: fadeOut 0.15s ease-in;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  @keyframes fadeOut {
    from {
      opacity: 1;
    }
    to {
      opacity: 0;
    }
  }

  /* Hide temp pagefind element if it exists */
  #temp-pagefind {
    display: none !important;
  }

  /* Smooth backdrop blur */
  search-modal .backdrop-blur-sm {
    backdrop-filter: blur(4px);
    -webkit-backdrop-filter: blur(4px);
  }
</style>
