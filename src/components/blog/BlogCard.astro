---
import { Image } from 'astro:assets'
import { render, type CollectionEntry, type CollectionKey } from 'astro:content'
import type { HTMLTag, Polymorphic } from 'astro/types'

import { Button, FormattedDate } from 'astro-pure/user'
import { cn } from 'astro-pure/utils'

type Props<Tag extends HTMLTag> = Polymorphic<{ as: Tag }> & {
  post: CollectionEntry<CollectionKey>
  detailed?: boolean
  class?: string
}

const { as: Tag = 'div', post, detailed = false, class: className } = Astro.props

const { id, data } = post

const { remarkPluginFrontmatter } = await render(post)
---

<li
  class={cn(
    'post-preview group/card flex flex-col relative rounded-2xl border bg-background transition-colors ease-in-out px-5 py-2.5 hover:bg-muted',
    detailed && 'max-sm:px-4 sm:py-5',
    className
  )}
  style={detailed &&
    data.heroImage?.color &&
    `--preview-highlight:color-mix(in srgb,${data.heroImage.color} 40%,hsl(var(--foreground)/var(--un-text-opacity,1)));
    --preview-highlight-bg:hsl(from ${data.heroImage.color} h s l/20%)`}
>
  <a
    class={cn(
      'group/link w-full flex flex-col transition-all hover:text-primary',
      !detailed && 'sm:flex-row',
      detailed && data.heroImage && 'max-md:pt-24'
    )}
    href={`/blog/${id}`}
    data-astro-prefetch
  >
    {
      detailed && data.heroImage && (
        <Image
          alt={data.heroImage.alt || data.title}
          class='cover-image absolute end-0 top-0 z-0 h-2/3 w-full rounded-2xl object-cover opacity-50 transition-opacity duration-300 group-hover/card:opacity-70 md:h-full md:w-3/5'
          loading='eager'
          {...data.heroImage}
        />
      )
    }

    <Tag class='z-10 flex-grow'>
      {/* title */}
      <div class='flex justify-between'>
        <div class={detailed && 'font-medium'}>
          {!data.publish && <span class='text-red-500'>(Draft) </span>}
          {data.title}
        </div>
        <span
          class='i-mingcute:arrow-right-line transition-all duration-300 group-hover/link:i-mingcute-book-line'
        ></span>
      </div>
      {
        detailed && (
          <>
            {/* desc */}
            <p
              class={cn(
                'line-clamp-2 pt-1 text-sm text-muted-foreground sm:line-clamp-3',
                data.heroImage && 'sm:me-24'
              )}
            >
              {data.description}
            </p>
            <div class='flex items-center gap-2 py-1.5 text-sm text-muted-foreground sm:py-3'>
              {/* published date */}
              <span class='flex items-center gap-1'>
                <span class='i-mingcute:calendar-2-line size-5' />
                {/* TEMP FIX: font-sans to revert font-mono in FormattedDate */}
                <FormattedDate date={data.publishDate} class='!font-sans' />
              </span>
              {/* updated date (if exists) */}
              {data.updatedDate && (
                <>
                  <span class='flex items-center gap-1'>
                    <span class='i-mingcute:clock-line size-5' />
                    {/* TEMP FIX: font-sans to revert font-mono in FormattedDate */}
                    <FormattedDate date={data.updatedDate} class='!font-sans' />
                  </span>
                </>
              )}
              {/* language */}
              {data.language && (
                <span class='flex items-center gap-1'>
                  <span class='i-mingcute:earth-line size-5' />
                  {data.language}
                </span>
              )}
              {/* reading time */}
              <span class='flex items-center gap-1'>
                <span class='i-mingcute:time-duration-line size-5' />
                {remarkPluginFrontmatter.minutesRead}
              </span>
            </div>
          </>
        )
      }
    </Tag>
  </a>
  <!-- tags -->
  {
    detailed && data.tags && (
      <ul class='tag-list mt-1 flex flex-wrap gap-2'>
        {data.tags.map((tag: string) => (
          <li>
            <Button title={tag} href={`/tags/${tag}`} style='pill' />
          </li>
        ))}
      </ul>
    )
  }
</li>

<style>
  .post-preview {
    --preview-highlight-final: var(
      --preview-highlight,
      hsl(var(--primary) / var(--un-text-opacity, 1))
    );
  }
  .post-preview:hover {
    &,
    & .tag-list a {
      background-color: var(
        --preview-highlight-bg,
        hsl(var(--muted) / var(--un-bg-opacity, 1))
      ) !important;
    }
    & > a,
    & .tag-list a:hover {
      color: var(--preview-highlight-final) !important;
    }
    & > a .preview-redirect {
      stroke: var(--preview-highlight-final) !important;
    }
  }
  .cover-image {
    mask-image: linear-gradient(to right, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 1) 100%);
    -ms-mask-image: -ms-linear-gradient(to right, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 1) 100%);
    -webkit-mask-image: -webkit-linear-gradient(
      to right,
      rgba(0, 0, 0, 0) 0%,
      rgba(0, 0, 0, 1) 100%
    );
  }

  @media (max-width: 768px) {
    .cover-image {
      mask-image: linear-gradient(to top, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 1) 100%);
      -ms-mask-image: -ms-linear-gradient(to top, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 1) 100%);
      -webkit-mask-image: -webkit-linear-gradient(
        to top,
        rgba(0, 0, 0, 0) 0%,
        rgba(0, 0, 0, 1) 100%
      );
    }
  }
</style>
