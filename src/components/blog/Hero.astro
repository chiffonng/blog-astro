---
import { Image } from 'astro:assets'

import type { HeroProps as Props } from '@/components/types'
import { FormattedDate } from '@/components'

const {
  data: { title, description, publish, heroImage, publishDate, updatedDate, tags },
  remarkPluginFrontmatter
} = Astro.props

const dateTimeOptions: Intl.DateTimeFormatOptions = {
  month: 'short'
}
---

{
  heroImage && (
    <div class='hero-image relative mb-6'>
      <Image
        alt={heroImage.alt || title}
        class='cover-image relative z-10 h-auto w-full max-w-[65ch] rounded-2xl object-contain'
        fetchpriority='high'
        loading='eager'
        {...heroImage}
      />
      <Image
        alt='Blur image'
        fetchpriority='high'
        loading='eager'
        id='blurImage'
        class='absolute end-0 top-4 z-0 mt-0 h-full max-w-[65ch] rounded-3xl opacity-60 transition-opacity duration-300'
        {...heroImage}
      />
    </div>
  )
}

{!publish ? <span class='text-red-500'>(Draft)</span> : null}

<div class='article-info max-lg:mx-auto'>
  <hgroup>
    {/* Primary metadata - essential info only */}
    <div class='flex flex-wrap gap-x-4 gap-y-2 text-xs leading-6 text-muted-foreground'>
      <div class='flex items-center gap-1'>
        <span class='i-mingcute:calendar-2-line' aria-label='Published date'></span>
        <FormattedDate date={publishDate} dateTimeOptions={dateTimeOptions} />
        {
          updatedDate && (
            <span class='flex items-center gap-1'>
              <span class='mx-1'>â€¢</span>
              <span>Updated</span>
              <FormattedDate date={updatedDate} dateTimeOptions={dateTimeOptions} />
            </span>
          )
        }
      </div>

      <div class='flex items-center gap-1'>
        <span class='i-mingcute:time-duration-line' aria-label='Reading time'></span>
        {remarkPluginFrontmatter.minutesRead}
      </div>
    </div>

    {
      !!tags?.length && (
        <div class='mt-2 flex items-center gap-1 text-xs text-muted-foreground'>
          <span class='i-mingcute:hashtag-line' aria-label='Tags' />
          {tags.map((tag: string, i: number) => (
            <span>
              <a
                aria-label={`View more blogs with the tag ${tag}`}
                class='hover:text-primary hover:underline hover:underline-offset-4 transition-colors'
                data-pagefind-filter='tag'
                href={`/tags/${tag}`}
              >
                {tag}
              </a>
              {i < tags.length - 1 && <span class='mx-1'>/</span>}
            </span>
          ))}
        </div>
      )
    }

    <h1 class='mt-4 text-2xl font-medium sm:mb-2 sm:mt-6 sm:text-3xl'>
      {title}
    </h1>

    <p class='mt-3 italic text-sm text-muted-foreground'>{description}</p>
  </hgroup>

  {/* Dividing line */}
  <div class='mt-4 w-1/2 border-t max-lg:mx-auto sm:mt-6 sm:w-1/3'></div>
</div>
<script>
  const viewportHeight = window.innerHeight
  const threshold1 = viewportHeight / 9
  const threshold2 = (viewportHeight * 2) / 9
  const threshold3 = (viewportHeight * 3) / 9
  const image = document.getElementById('blurImage') as HTMLImageElement

  if (image) {
    window.addEventListener('scroll', () => {
      const scrollDistance = window.scrollY
      // console.log(scrollDistance, threshold1, threshold2, threshold3)

      if (scrollDistance >= threshold3) {
        image.style.opacity = '0.15'
      } else if (scrollDistance >= threshold2) {
        image.style.opacity = '0.3'
      } else if (scrollDistance >= threshold1) {
        image.style.opacity = '0.45'
      }
    })
  }
</script>

<style>
  #blurImage {
    --un-blur: blur(24px);
    filter: var(--un-blur);
  }
</style>
