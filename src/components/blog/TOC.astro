---
import { generateToc } from '@/plugins/toc'
import type { TOCProps as Props } from '@/components/types'
import { TOCHeading } from '@/components'

const { headings, class: className, isMobile = false, ...props } = Astro.props

const toc = generateToc(headings)
const tocText = 'Table of Contents'
---

<toc-content class={className} {...props}>
  <nav aria-label='Table of contents' class='toc-container'>
    {
      !isMobile && (
        <h2 class='text-sm font-semibold text-muted-foreground mb-2 uppercase tracking-wide'>
          {tocText}
        </h2>
      )
    }
    <ol class='text-card-foreground space-y-1'>
      {toc.map((heading) => <TOCHeading heading={heading} />)}
    </ol>
  </nav>
</toc-content>

<script>
  import { TOCScrollManager } from '@/plugins/toc'

  class TOCContent extends HTMLElement {
    private scrollManager: TOCScrollManager | null = null

    connectedCallback() {
      // Determine which container this TOC is in
      const isInMobileToc = this.closest('#mobile-toc') !== null

      this.scrollManager = new TOCScrollManager(this)
      this.scrollManager.init()

      // Set the container ID for auto-scroll
      if (isInMobileToc) {
        this.scrollManager.setContainerId('mobile-toc')
      } else {
        this.scrollManager.setContainerId('sidebar')
      }
    }
  }

  customElements.define('toc-content', TOCContent)
</script>

<style>
  toc-content {
    display: block;
    width: 100%;
    overflow: hidden;
  }

  .toc-container {
    width: 100%;
    overflow: hidden;
  }

  /* Remove default list styling for semantic ol/ul */
  toc-content :global(ol),
  toc-content :global(ul) {
    list-style: none;
    padding-left: 0;
    margin: 0;
    width: 100%;
  }
</style>
