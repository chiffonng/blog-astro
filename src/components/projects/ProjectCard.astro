---
import type { ProjectCardProps as Props } from '@/components/types'
import { createDateRange } from '@/lib/format-date'
import { getProjectLinks } from './helper'
import { LinkExternal, Pill } from '@/components'

const { project } = Astro.props
const {
  title,
  isHighlighted,
  fromDate,
  toDate,
  repo,
  doc,
  url,
  release,
  context,
  tags,
  description
} = project.data

const dateRange = createDateRange(fromDate, toDate)
const links = getProjectLinks(repo, doc, url, release)

const getContextBadgeClass = (context?: string) => {
  switch (context) {
    case 'school':
      return 'badge-blue'
    case 'work':
      return 'badge-green'
    case 'personal':
      return 'badge-purple'
    case 'collab':
      return 'badge-orange'
    default:
      return 'badge-gray'
  }
}

const contextBadgeClass = getContextBadgeClass(context)

const getDescriptionData = () => {
  if (description) {
    return { text: description, needsReadMore: false }
  }
  if (project.body) {
    if (project.body.length > 150) {
      return {
        text: project.body.substring(0, 150) + '...',
        needsReadMore: hasDetailPage
      }
    } else {
      return { text: project.body, needsReadMore: false }
    }
  }
  return null
}

const descriptionData = getDescriptionData()
const hasDetailPage = project.body && project.body.trim().length > 0
---

<article
  class:list={[
    'block h-full group relative mx-2 my-1 overflow-hidden border rounded-lg transition-all duration-300 hover:shadow-lg hover:scale-[1.02] cursor-pointer',
    isHighlighted
      ? 'ring-2 ring-primary bg-gradient-to-br from-primary/5 via-background to-background hover:ring-primary/70'
      : 'bg-card hover:bg-muted/30 hover:border-primary/20'
  ]}
>
  <div class='px-6 py-3 h-full'>
    <div class='flex flex-col h-full'>
      {/* Header */}
      <div class='flex items-center gap-x-2'>
        {
          isHighlighted && (
            <>
              <span class='text-primary i-mingcute:star-line' aria-hidden='true' />
              <span class='sr-only'>Featured</span>
            </>
          )
        }
        {
          hasDetailPage ? (
            <a href={`/projects/${project.id}`} data-astro-prefetch='tap'>
              <h3 class='my-2 text-lg font-semibold leading-tight text-foreground hover:text-primary'>
                {title}
              </h3>
            </a>
          ) : (
            <h3 class='text-lg font-semibold leading-tight'>{title}</h3>
          )
        }
      </div>

      {/* Context and Date */}
      <div class='flex flex-wrap items-center gap-2 text-sm'>
        {
          context && (
            <span class={contextBadgeClass}>
              {context.charAt(0).toUpperCase() + context.slice(1)}
            </span>
          )
        }
        {dateRange && <date class='text-muted-foreground'>{dateRange}</date>}
      </div>

      {/* Content */}
      {
        descriptionData && (
          <p class='text-muted-foreground leading-relaxed w-full'>
            {descriptionData.text}
            {descriptionData.needsReadMore && (
              <a
                href={`/projects/${project.id}`}
                data-astro-prefetch='tap'
                class='ml-1 text-primary hover:underline'
              >
                Read more â†’
              </a>
            )}
          </p>
        )
      }

      {/* Tags */}
      {
        tags && tags.length > 0 && (
          <div class='flex flex-wrap gap-1'>
            {tags.map((tag: string) => (
              <Pill title={tag} />
            ))}
          </div>
        )
      }

      {/* Links */}
      {
        links.length > 0 && (
          <div class='flex flex-wrap gap-x-2 mt-auto'>
            {links.map(({ href, icon, label }) => (
              <LinkExternal href={href} title={label} icon={icon} />
            ))}
          </div>
        )
      }
    </div>
  </div>
</article>
