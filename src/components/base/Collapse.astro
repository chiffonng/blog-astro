---
import type { CollapseProps as Props } from '@/components/types'

const { class: className, title, isExpanded = false, ...props } = Astro.props
---

<collapse-component class:list={['group/expand', isExpanded && 'expanded']}>
  <details
    class:list={[
      'rounded-xl border px-3 my-4 sm:px-4 group-[.expanded]/expand:bg-muted',
      className
    ]}
    {...props}
    open={isExpanded}
  >
    <slot name='before' />
    <summary
      class='expand-title group/highlight sticky top-0 z-20 flex cursor-pointer items-center justify-between py-1.5 group-[.expanded]/expand:bg-muted sm:py-2 list-none'
    >
      <span class='group-hover/highlight:text-primary'>{title}</span>
      <span
        class='expand-button i-mingcute:up-line size-4 transition-transform group-hover/highlight:text-primary group-[.expanded]/expand:rotate-180'
        aria-hidden='true'></span>
    </summary>
    <div class='expand-content group-[.expanded]/expand:block'>
      <slot />
    </div>
  </details>
</collapse-component>

<script>
  class Collapse extends HTMLElement {
    constructor() {
      super()
    }

    connectedCallback() {
      const details = this.querySelector('details')

      if (details) {
        // Sync custom expanded class with details open state
        details.addEventListener('toggle', () => {
          this.classList.toggle('expanded', details.open)
        })

        // Initialize expanded state
        this.classList.toggle('expanded', details.open)
      }
    }
  }
  customElements.define('collapse-component', Collapse)
</script>

<style>
  .expand-content {
    display: none;
  }
  .expanded .expand-content {
    display: block;
  }
</style>
