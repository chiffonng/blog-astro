---
import { profile } from '@/site-config'
import type { ProcessedProfileLink, ProfileLinksProps as Props } from '@/types'
import { createProtectedEmail } from '@/server'
import { processProfileLinks } from '@/lib'

const {
  includeRss = false,
  showLabels = false,
  class: containerClass = '',
  linkClass = '',
  ariaLabel = 'Contact links'
} = Astro.props

const contactLinksData = includeRss ? { ...profile.links, rss: '/rss.xml' } : profile.links

const profileLinkList = processProfileLinks(contactLinksData)

const defaultContainerClass = showLabels
  ? 'flex flex-wrap justify-center items-center gap-x-4 gap-y-2 lg:gap-x-6'
  : 'flex justify-center items-center gap-x-2'

const defaultLinkClass = showLabels
  ? 'inline-flex justify-center items-center gap-1 hover:text-primary transition-colors group'
  : 'inline-flex'

const finalContainerClass = [containerClass, defaultContainerClass]
---

<nav class:list={finalContainerClass} aria-label={ariaLabel}>
  {
    profileLinkList.map(({ type, url, label, iconClass }: ProcessedProfileLink) => {
      if (type === 'mail') {
        const protectedEmail = createProtectedEmail(url)
        return (
          <button
            class:list={[defaultLinkClass, linkClass, 'email-reveal cursor-pointer']}
            data-email={protectedEmail.dataEmail}
            aria-label='Email (click to reveal)'
            title='Click to reveal email address'
          >
            <div class:list={[iconClass, 'group-hover:scale-110 transition-transform']} />
            {showLabels && <span set:html={protectedEmail.obfuscated} />}
          </button>
        )
      }
      return (
        <a
          href={url}
          target='_blank'
          class:list={[linkClass, defaultLinkClass]}
          rel='noopener noreferrer'
          aria-label={type}
          title={label}
        >
          <div class:list={[iconClass, 'group-hover:scale-110 transition-transform']} />
          {showLabels && <span>{label}</span>}
        </a>
      )
    })
  }
</nav>

<script>
  // Email reveal functionality
  document.addEventListener('DOMContentLoaded', () => {
    const emailButtons = document.querySelectorAll('.email-reveal')

    emailButtons.forEach((button) => {
      button.addEventListener('click', async (e) => {
        e.preventDefault()

        const encodedEmail = button.getAttribute('data-email')
        if (encodedEmail) {
          try {
            // Decode the email using modern Web APIs
            const response = await fetch(`data:text/plain;base64,${encodedEmail}`)
            const base64Decoded = await response.text()
            const decodedEmail = base64Decoded.split('').reverse().join('')

            const mailtoLink = `mailto:${decodedEmail}`

            // Update button to become a link
            const link = document.createElement('a')
            link.href = mailtoLink
            link.className = button.className.replace('email-reveal', '')
            link.innerHTML = button.innerHTML
            link.setAttribute('aria-label', 'Email')
            link.setAttribute('title', decodedEmail)

            // Replace button with link
            button.replaceWith(link)

            // Trigger the email client
            window.location.href = mailtoLink
          } catch (error) {
            console.error('Failed to decode email:', error)
          }
        }
      })
    })
  })
</script>
