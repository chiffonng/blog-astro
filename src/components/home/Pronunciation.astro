---
import type { PronunciationProps as Props } from '@/types'

const { pronounce, pronounceAudio, class: containerClass = '' } = Astro.props

const processedAudioPath = pronounceAudio
  ? (() => {
      // Handle local file paths - convert to public URL
      if (!pronounceAudio.startsWith('http')) {
        // If it's a simple filename, assume it's in public/audio/
        if (!pronounceAudio.includes('/')) {
          return `/audio/${pronounceAudio}`
        }
        if (pronounceAudio.startsWith('/audio/')) {
          return pronounceAudio
        }
        return `/audio/${pronounceAudio.replace(/^\//, '')}`
      }
      return pronounceAudio
    })()
  : undefined

const hasAudio = !!processedAudioPath
const hasText = !!pronounce
const buttonTitle = hasText ? `Pronunciation guide: ${pronounce}` : 'Play pronunciation'
---

{
  (hasText || hasAudio) && (
    <div class={containerClass}>
      {hasAudio && (
        <audio
          preload='metadata'
          class='pronunciation-audio sr-only'
          data-pronunciation-id={`pronunciation-${Math.random().toString(36).substring(2, 11)}`}
        >
          <source src={processedAudioPath} type='audio/mpeg' />
          <source src={processedAudioPath} type='audio/wav' />
          <source src={processedAudioPath} type='audio/ogg' />
          <source src={processedAudioPath} type='audio/webm' />
          <source src={processedAudioPath} type='audio/m4a' />
          Your browser does not support the audio element.
        </audio>
      )}

      <button
        type='button'
        class='pronunciation-button'
        title={buttonTitle}
        data-pronunciation={pronounce}
        data-has-audio={hasAudio}
        data-has-text={hasText}
        aria-label={buttonTitle}
      >
        <div class='pronunciation-icon i-mingcute:volume-line size-4' />
      </button>

      {/* Pronunciation text tooltip */}
      {hasText && <div class='pronunciation-tooltip'>{pronounce}</div>}
    </div>
  )
}

<script>
  // Initialize when DOM is ready
  document.addEventListener('DOMContentLoaded', () => {
    const buttons = document.querySelectorAll('.pronunciation-button')

    buttons.forEach((button) => {
      let tooltipTimeout: ReturnType<typeof setTimeout> | null = null

      button.addEventListener('click', () => {
        const htmlButton = button as HTMLButtonElement
        const hasAudio = htmlButton.dataset.hasAudio === 'true'
        const hasText = htmlButton.dataset.hasText === 'true'

        if (hasAudio) {
          // Find and play the audio element
          const audioElement = htmlButton.parentElement?.querySelector(
            '.pronunciation-audio'
          ) as HTMLAudioElement

          if (audioElement) {
            audioElement.currentTime = 0
            audioElement.play().catch((error: Error) => {
              console.error('Failed to play pronunciation audio:', error)
              // Fallback to text tooltip if audio fails
              if (hasText) {
                const tooltip = htmlButton.parentElement?.querySelector(
                  '.pronunciation-tooltip'
                ) as HTMLElement
                if (tooltip) {
                  tooltip.style.display = 'block'
                  tooltip.style.opacity = '1'
                  tooltipTimeout = setTimeout(() => {
                    tooltip.style.opacity = '0'
                    setTimeout(() => (tooltip.style.display = 'none'), 200)
                  }, 3000)
                }
              }
            })
          }
        } else if (hasText) {
          // Toggle tooltip for text-only pronunciation
          const tooltip = htmlButton.parentElement?.querySelector(
            '.pronunciation-tooltip'
          ) as HTMLElement
          if (tooltip) {
            const isVisible = tooltip.style.opacity === '1'

            if (tooltipTimeout) {
              clearTimeout(tooltipTimeout)
              tooltipTimeout = null
            }

            if (isVisible) {
              // Hide tooltip
              tooltip.style.opacity = '0'
              setTimeout(() => (tooltip.style.display = 'none'), 200)
            } else {
              // Show tooltip
              tooltip.style.display = 'block'
              tooltip.style.opacity = '1'
              tooltipTimeout = setTimeout(() => {
                tooltip.style.opacity = '0'
                setTimeout(() => (tooltip.style.display = 'none'), 200)
              }, 5000)
            }
          }
        }
      })
    })
  })
</script>

<style>
  .pronunciation-button {
    background-color: hsl(var(--muted));
    padding: 0.375rem;
    border-radius: 50%;
    border: 2px solid hsl(var(--background));
    transition: transform 0.2s;
  }

  .pronunciation-button:hover {
    transform: scale(1.1);
  }

  .pronunciation-button:active {
    transform: scale(0.95);
  }

  .pronunciation-tooltip {
    display: none;
    position: absolute;
    background-color: hsl(var(--popover));
    border: 1px solid hsl(var(--border));
    border-radius: 0.375rem;
    padding: 0.25rem 0.5rem;
    font-size: 0.75rem;
    box-shadow:
      0 4px 6px -1px rgb(0 0 0 / 0.1),
      0 2px 4px -2px rgb(0 0 0 / 0.1);
    z-index: 20;
    opacity: 0;
    transition: opacity 0.2s;
    left: 50%;
    transform: translateX(-50%);
    top: 100%;
    margin-top: 0.5rem;
    width: 20rem;
    word-wrap: break-word;
  }

  @media (max-width: 640px) {
    .pronunciation-tooltip {
      width: 18rem;
    }
  }
</style>
