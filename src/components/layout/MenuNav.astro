---
import config from '@/site.config'

import { MenuDrawer, MenuDropdown, SearchBox, SlideOut } from '@/components'
---

<menu-header class='header-main'>
  <a class='brand-link' href='/' aria-label='Website name'>
    <span class='i-mingcute:home-4-line size-6 shrink'></span>
    <span class='brand-text'>{config.title}</span>
  </a>

  <div class='flex items-center gap-x-1'>
    {/* Desktop Menu links */}
    <MenuDropdown class='hidden sm:flex sm:items-center sm:gap-1' />

    {/* buttons */}
    <div class='z-30 flex gap-x-4 buttons-container'>
      <SearchBox />
      <button
        id='changeTheme'
        class='theme-btn'
        aria-label='Change Theme'
        data-theme='system'
        transition:persist
      >
        <span class='sr-only'>Change theme</span>
        <span class='theme-icon system i-mingcute:computer-line hover:text-primary'></span>
        <span class='theme-icon light i-mingcute:sun-line hover:text-primary'></span>
        <span class='theme-icon dark i-mingcute:moon-line hover:text-primary'></span>
      </button>
      <button data-panel-trigger='mobile-menu' class='menu-btn' aria-label='Toggle Menu'>
        <span class='sr-only'>Menu</span>
        <span class='i-mingcute:menu-line size-5'></span>
      </button>
    </div>
  </div>
</menu-header>

{/* Mobile Menu Panel */}
<SlideOut id='mobile-menu' title='Menu' side='right'>
  <MenuDrawer />

  <div class='mt-6 pt-6 border-t border-border'>
    <h4 class='panel-title'>Theme</h4>
    <button id='panelThemeToggle' class='panel-theme-btn' data-theme='system'>
      <span class='theme-icon system i-mingcute:computer-line size-5'></span>
      <span class='theme-icon light i-mingcute:sun-line size-5'></span>
      <span class='theme-icon dark i-mingcute:moon-line size-5'></span>
      <span class='theme-text'>System</span>
    </button>
  </div>
</SlideOut>

<script>
  import { setTheme, showToast } from '@/lib/set-theme'

  class Header extends HTMLElement {
    private scrollTicking = false
    private lastScrollY = window.scrollY
    private themeBtn: HTMLButtonElement | null = null
    private panelThemeBtn: HTMLButtonElement | null = null
    private handleScroll: () => void
    private handleThemeChange: () => void
    private resizeObserver: ResizeObserver | null = null

    constructor() {
      super()

      // Pre-bind methods to avoid recreation
      this.handleScroll = this.createScrollHandler()
      this.handleThemeChange = this.createThemeHandler()
    }

    connectedCallback() {
      this.initializeHeader()
      this.setupScrollListener()
      this.initializeTheme()
      this.setupResizeObserver()
    }

    disconnectedCallback() {
      // Clean up event listeners and observers
      window.removeEventListener('scroll', this.handleScroll)
      this.themeBtn?.removeEventListener('click', this.handleThemeChange)
      this.panelThemeBtn?.removeEventListener('click', this.handleThemeChange)
      this.resizeObserver?.disconnect()
    }

    private initializeHeader() {
      const isNotTop = this.lastScrollY > 20
      this.updateHeaderState(isNotTop)
    }

    private updateHeaderState(isNotTop: boolean) {
      this.classList.toggle('not-top', isNotTop)

      // Update CSS custom properties efficiently
      const isDesktop = window.innerWidth >= 640
      this.style.setProperty('--brand-margin', isNotTop ? (isDesktop ? '0.75rem' : '0.5rem') : '0')
      this.style.setProperty('--buttons-gap', isNotTop ? '0.5rem' : '1rem')
    }

    private createScrollHandler() {
      return () => {
        if (this.scrollTicking) return

        this.scrollTicking = true
        requestAnimationFrame(() => {
          const currentScrollY = window.scrollY
          const isNotTop = currentScrollY > 20
          const shouldShow = currentScrollY < 350 || currentScrollY < this.lastScrollY

          // Batch DOM updates
          this.updateHeaderState(isNotTop)
          this.dataset.show = String(shouldShow)

          this.lastScrollY = currentScrollY
          this.scrollTicking = false
        })
      }
    }

    private setupScrollListener() {
      // Use passive listeners for better performance
      window.addEventListener('scroll', this.handleScroll, {
        passive: true,
        capture: false
      })
    }

    private setupResizeObserver() {
      // Optimize for viewport changes that affect responsive behavior
      if ('ResizeObserver' in window) {
        this.resizeObserver = new ResizeObserver(() => {
          if (this.classList.contains('not-top')) {
            this.updateHeaderState(true)
          }
        })
        this.resizeObserver.observe(document.documentElement)
      }
    }

    private initializeTheme() {
      // Cache DOM queries with more specific selectors
      this.themeBtn = this.querySelector('#changeTheme') as HTMLButtonElement
      this.panelThemeBtn = document.getElementById('panelThemeToggle') as HTMLButtonElement

      // Initialize theme from localStorage with fallback
      const currentTheme = localStorage.getItem('theme') ?? 'system'
      this.updateThemeButtons(currentTheme)

      // Set up event listeners with pre-bound handler
      if (this.themeBtn) {
        this.themeBtn.addEventListener('click', this.handleThemeChange)
      }
      if (this.panelThemeBtn) {
        this.panelThemeBtn.addEventListener('click', this.handleThemeChange)
      }
    }

    private createThemeHandler() {
      return () => {
        const newTheme = setTheme(undefined, true) ?? 'system'
        this.updateThemeButtons(newTheme)
        showToast({ message: `Set theme to ${newTheme}` })
      }
    }

    private updateThemeButtons(theme: string) {
      // Use optional chaining and batch updates
      if (this.themeBtn) {
        this.themeBtn.dataset.theme = theme
      }

      if (this.panelThemeBtn) {
        this.panelThemeBtn.dataset.theme = theme
        const themeText = this.panelThemeBtn.querySelector('.theme-text') as HTMLElement
        if (themeText) {
          themeText.textContent = theme.charAt(0).toUpperCase() + theme.slice(1)
        }
      }
    }
  }

  // Define custom element only once
  if (!customElements.get('menu-header')) {
    customElements.define('menu-header', Header)
  }
</script>

<style>
  menu-header {
    --brand-margin: 0;
    --buttons-gap: 1rem;

    transition:
      padding 0.3s ease-out,
      transform 0.3s ease-out,
      margin-inline 0.3s ease-out,
      border-color 0.15s ease-out,
      background-color 0.15s ease-out;
    will-change: transform;
    contain: layout style;

    &.not-top {
      --un-border-opacity: 1;
      border-color: hsl(var(--border) / var(--un-border-opacity));
      --un-bg-opacity: 1;
      background-color: hsl(var(--background) / var(--un-bg-opacity));
      padding-left: 0.375rem;
      padding-right: 0.375rem;
      box-shadow:
        0 0 0 0 hsl(var(--background)),
        0 0 0 1px hsl(var(--border) / 0.08),
        0 10px 15px -3px hsl(var(--foreground) / 0.08),
        0 4px 6px -4px hsl(var(--foreground) / 0.08);
    }

    &[data-show='false'] {
      transform: translateY(-5rem);
    }

    @media (min-width: 800px) {
      &.not-top {
        margin-inline: 5%;
      }
    }
  }

  .brand-link {
    margin-inline-start: var(--brand-margin);
    transition: margin-inline-start 0.3s ease-out;
    contain: layout;
  }

  .buttons-container {
    gap: var(--buttons-gap);
    transition: gap 0.3s ease-out;
    contain: layout;
  }

  /* Dark theme styles */
  :global(.dark) menu-header.not-top {
    --un-bg-opacity: 1;
    background-color: hsl(var(--muted) / var(--un-bg-opacity));
  }

  /* Shared theme toggle styles */
  .theme-btn,
  #panelThemeToggle {
    .theme-icon {
      display: none;
    }

    .theme-icon.system {
      display: block;
    }

    &[data-theme='dark'] {
      .theme-icon.system,
      .theme-icon.dark {
        display: none;
      }
      .theme-icon.light {
        display: block;
      }
    }

    &[data-theme='light'] {
      .theme-icon.system,
      .theme-icon.light {
        display: none;
      }
      .theme-icon.dark {
        display: block;
      }
    }
  }

  /* Header layout */
  .header-main {
    position: sticky;
    top: 1rem;
    z-index: 30;
    margin-bottom: 3rem;
    display: flex;
    align-items: center;
    justify-content: space-between;
    border-radius: 0.75rem;
    border: 1px solid transparent;
    padding-top: 0.25rem;
    padding-bottom: 0.25rem;
  }

  @media (min-width: 640px) {
    .header-main {
      border-radius: 1rem;
      padding-top: 0;
      padding-bottom: 0;
    }
  }

  /* Brand link */
  .brand-link {
    z-index: 30;
    font-size: 1.25rem;
    font-weight: 600;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-inline-start: var(--brand-margin);
    transition: margin-inline-start 0.3s ease-out;
    contain: layout;
  }

  .brand-text {
    white-space: nowrap;
    overflow: hidden;
  }

  .header-main.not-top .brand-text {
    font-size: 1rem;
  }

  /* Header actions */
  .header-actions {
    display: flex;
    align-items: center;
    gap: 0.25rem;
  }

  .desktop-menu {
    display: none;
  }

  @media (min-width: 640px) {
    .desktop-menu {
      display: flex;
      align-items: center;
      gap: 0.25rem;
    }
  }

  /* Buttons */
  .buttons-container {
    z-index: 30;
    display: flex;
    gap: var(--buttons-gap);
    transition: gap 0.3s ease-out;
    contain: layout;
  }

  .theme-btn,
  .menu-btn {
    box-sizing: content-box;
    width: 1.25rem;
    height: 1.25rem;
    border-radius: 0.375rem;
    border: 1px solid hsl(var(--border));
    padding: 0.375rem;
    transition:
      colors 0.2s ease,
      background-color 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .theme-btn:hover,
  .menu-btn:hover {
    background-color: hsl(var(--border));
  }

  .menu-btn {
    display: flex;
  }

  @media (min-width: 640px) {
    .menu-btn {
      display: none;
    }

    .header-main.not-top .theme-btn,
    .header-main.not-top .menu-btn {
      border-radius: 0.75rem;
    }
  }

  /* Panel styles */
  .panel-title {
    padding: 0.5rem 1rem;
    font-size: 0.875rem;
    font-weight: 600;
    color: hsl(var(--muted-foreground));
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .panel-theme-btn {
    width: 100%;
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.75rem 1rem;
    font-weight: 500;
    transition:
      color 0.2s ease,
      background-color 0.2s ease;
    border-radius: 0.375rem;
    text-align: left;
  }

  .panel-theme-btn:hover {
    color: hsl(var(--primary));
    background-color: hsl(var(--muted) / 0.5);
  }
</style>
