---
import config from '@/site.config'

import { MenuItems, SearchBox, SlideOut } from '@/components'
---

<header-component
  class='group sticky top-4 z-30 mb-12 flex items-center justify-between rounded-xl border border-transparent max-sm:py-1 sm:rounded-2xl'
>
  <a
    class='z-30 text-xl font-semibold brand-link flex items-center gap-2'
    href='/'
    aria-label='Website name'
  >
    <span class='i-mingcute:home-4-line size-6 shrink'></span>
    <span class='group-[.not-top]:text-base whitespace-nowrap overflow-hidden'>{config.title}</span>
  </a>

  <div class='flex items-center gap-x-1'>
    {/* Desktop Menu links */}
    <div class='hidden sm:flex sm:items-center sm:gap-1'>
      <MenuItems variant='desktop' />
    </div>

    {/* buttons */}
    <div class='z-30 flex gap-x-4 buttons-container'>
      <SearchBox />
      <button
        id='changeTheme'
        class='theme-btn group box-content size-5 rounded-md border p-1.5 transition-colors hover:bg-border sm:group-[.not-top]:rounded-xl flex items-center justify-center'
        aria-label='Change Theme'
        data-theme='system'
        transition:persist
      >
        <span class='sr-only'>Change theme</span>
        <span class='theme-icon system i-mingcute:computer-line hover:text-primary'></span>
        <span class='theme-icon light i-mingcute:sun-line hover:text-primary'></span>
        <span class='theme-icon dark i-mingcute:moon-line hover:text-primary'></span>
      </button>
      <button
        data-panel-trigger='mobile-menu'
        class='menu-btn rounded-md border p-1.5 transition-colors hover:bg-border sm:hidden sm:group-[.not-top]:rounded-xl flex items-center justify-center'
        aria-label='Toggle Menu'
      >
        <span class='sr-only'>Menu</span>
        <span class='i-mingcute:menu-line size-5'></span>
      </button>
    </div>
  </div>
</header-component>

{/* Mobile Menu Panel */}
<SlideOut id='mobile-menu' title='Menu' side='right'>
  <nav class='space-y-0.5'>
    <MenuItems variant='mobile' />
  </nav>

  <div class='mt-6 pt-6 border-t border-border'>
    <h4 class='px-4 py-2 text-sm font-semibold text-muted-foreground uppercase tracking-wider'>
      Theme
    </h4>
    <button
      id='panelThemeToggle'
      class='w-full flex items-center gap-3 px-4 py-3 font-medium transition-colors hover:text-primary hover:bg-muted/50 rounded-md text-left'
      data-theme='system'
    >
      <span class='theme-icon system i-mingcute:computer-line size-5'></span>
      <span class='theme-icon light i-mingcute:sun-line size-5'></span>
      <span class='theme-icon dark i-mingcute:moon-line size-5'></span>
      <span class='theme-text'>System</span>
    </button>
  </div>
</SlideOut>

<script>
  import { setTheme, showToast } from '@/lib/set-theme'

  class Header extends HTMLElement {
    private scrollTicking = false
    private lastScrollY = window.scrollY
    private themeBtn: HTMLButtonElement | null = null
    private panelThemeBtn: HTMLButtonElement | null = null
    private handleScroll: () => void
    private handleThemeChange: () => void
    private resizeObserver: ResizeObserver | null = null

    constructor() {
      super()

      // Pre-bind methods to avoid recreation
      this.handleScroll = this.createScrollHandler()
      this.handleThemeChange = this.createThemeHandler()
    }

    connectedCallback() {
      this.initializeHeader()
      this.setupScrollListener()
      this.initializeTheme()
      this.setupResizeObserver()
    }

    disconnectedCallback() {
      // Clean up event listeners and observers
      window.removeEventListener('scroll', this.handleScroll)
      this.themeBtn?.removeEventListener('click', this.handleThemeChange)
      this.panelThemeBtn?.removeEventListener('click', this.handleThemeChange)
      this.resizeObserver?.disconnect()
    }

    private initializeHeader() {
      const isNotTop = this.lastScrollY > 20
      this.updateHeaderState(isNotTop)
    }

    private updateHeaderState(isNotTop: boolean) {
      // Use single class toggle instead of multiple operations
      this.classList.toggle('not-top', isNotTop)

      // Batch CSS property updates
      const brandMargin = isNotTop ? (window.innerWidth >= 640 ? '0.75rem' : '0.5rem') : '0'
      const buttonsGap = isNotTop ? '0.5rem' : '1rem'

      this.style.cssText += `--brand-margin:${brandMargin};--buttons-gap:${buttonsGap};`
    }

    private createScrollHandler() {
      return () => {
        if (this.scrollTicking) return

        this.scrollTicking = true
        requestAnimationFrame(() => {
          const currentScrollY = window.scrollY
          const isNotTop = currentScrollY > 20
          const shouldShow = currentScrollY < 350 || currentScrollY < this.lastScrollY

          this.updateHeaderState(isNotTop)
          this.dataset.show = shouldShow.toString()

          this.lastScrollY = currentScrollY
          this.scrollTicking = false
        })
      }
    }

    private setupScrollListener() {
      // Use passive listeners for better performance
      window.addEventListener('scroll', this.handleScroll, {
        passive: true,
        capture: false
      })
    }

    private setupResizeObserver() {
      // Optimize for viewport changes that affect responsive behavior
      if ('ResizeObserver' in window) {
        this.resizeObserver = new ResizeObserver(() => {
          if (this.classList.contains('not-top')) {
            this.updateHeaderState(true)
          }
        })
        this.resizeObserver.observe(document.documentElement)
      }
    }

    private initializeTheme() {
      // Cache DOM queries
      this.themeBtn = this.querySelector('#changeTheme')
      this.panelThemeBtn = document.getElementById('panelThemeToggle') as HTMLButtonElement

      // Initialize theme from localStorage with fallback
      const currentTheme = localStorage.getItem('theme') ?? 'system'
      this.updateThemeButtons(currentTheme)

      // Set up event listeners with pre-bound handler
      this.themeBtn?.addEventListener('click', this.handleThemeChange)
      this.panelThemeBtn?.addEventListener('click', this.handleThemeChange)
    }

    private createThemeHandler() {
      return () => {
        const newTheme = setTheme(undefined, true) ?? 'system'
        this.updateThemeButtons(newTheme)
        showToast({ message: `Set theme to ${newTheme}` })
      }
    }

    private updateThemeButtons(theme: string) {
      // Batch DOM updates
      if (this.themeBtn) {
        this.themeBtn.dataset.theme = theme
      }

      if (this.panelThemeBtn) {
        this.panelThemeBtn.dataset.theme = theme
        const themeText = this.panelThemeBtn.querySelector('.theme-text')
        if (themeText) {
          themeText.textContent = theme.charAt(0).toUpperCase() + theme.slice(1)
        }
      }
    }
  }

  // Define custom element only once
  if (!customElements.get('header-component')) {
    customElements.define('header-component', Header)
  }
</script>

<style>
  header-component {
    --brand-margin: 0;
    --buttons-gap: 1rem;

    transition:
      padding 0.3s ease-out,
      transform 0.3s ease-out,
      margin-inline 0.3s ease-out,
      border-color 0.15s ease-out,
      background-color 0.15s ease-out;
    will-change: transform;
    contain: layout style;

    &.not-top {
      --un-border-opacity: 1;
      border-color: hsl(var(--border) / var(--un-border-opacity));
      --un-bg-opacity: 1;
      background-color: hsl(var(--background) / var(--un-bg-opacity));
      padding-left: 0.375rem;
      padding-right: 0.375rem;
      box-shadow:
        0 0 0 0 hsl(var(--background)),
        0 0 0 1px hsl(var(--border) / 0.08),
        0 10px 15px -3px hsl(var(--foreground) / 0.08),
        0 4px 6px -4px hsl(var(--foreground) / 0.08);
    }

    &[data-show='false'] {
      transform: translateY(-5rem);
    }

    @media (min-width: 800px) {
      &.not-top {
        margin-inline: 5%;
      }
    }
  }

  .brand-link {
    margin-inline-start: var(--brand-margin);
    transition: margin-inline-start 0.3s ease-out;
    contain: layout;
  }

  .buttons-container {
    gap: var(--buttons-gap);
    transition: gap 0.3s ease-out;
    contain: layout;
  }

  /* Dark theme styles */
  :global(.dark) header-component.not-top {
    --un-bg-opacity: 1;
    background-color: hsl(var(--muted) / var(--un-bg-opacity));
  }

  /* Shared theme toggle styles */
  .theme-btn,
  #panelThemeToggle {
    .theme-icon {
      display: none;
    }

    .theme-icon.system {
      display: block;
    }

    &[data-theme='dark'] {
      .theme-icon.system,
      .theme-icon.dark {
        display: none;
      }
      .theme-icon.light {
        display: block;
      }
    }

    &[data-theme='light'] {
      .theme-icon.system,
      .theme-icon.light {
        display: none;
      }
      .theme-icon.dark {
        display: block;
      }
    }
  }
</style>
