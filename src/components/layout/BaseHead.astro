---
import { ClientRouter } from 'astro:transitions'

import config from '@/site-config'
import type { SiteMeta as Props } from '@/types/site-config'
import { stripHtml } from '@/lib'

const { articleDate, description, ogImage, title } = Astro.props

const siteTitle = `${title} ${config.titleDelimiter} ${config.title}`
const canonicalURL = new URL(Astro.url.pathname, Astro.site).href
const socialImageURL = new URL(ogImage ? ogImage : '/img/social-preview.png', Astro.url).href
const plainDescription = description ? stripHtml(description) : description

// Check if favicon is an emoji and generate data URL
const emojiRegex = /^(\p{Emoji_Presentation}|\p{Emoji}\uFE0F)$/u
const isEmojiFavicon = emojiRegex.test(config.favicon)
const faviconDataURL = isEmojiFavicon
  ? `data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text y='.9em' font-size='90'>${config.favicon}</text></svg>`
  : null
---

<meta charset='utf-8' />
<meta content='width=device-width, initial-scale=1.0, shrink-to-fit=no' name='viewport' />
<meta content='IE=edge' http-equiv='X-UA-Compatible' />
<title>{siteTitle}</title>

{/* Favicon */}
{
  isEmojiFavicon ? (
    <>
      <link rel='icon' href={faviconDataURL} />
      <link rel='apple-touch-icon' href={faviconDataURL} />
    </>
  ) : (
    <>
      <link rel='apple-touch-icon' sizes='180x180' href='/favicon/apple-touch-icon.png' />
      <link rel='icon' type='image/png' sizes='32x32' href='/favicon/favicon-32x32.png' />
      <link rel='icon' type='image/png' sizes='16x16' href='/favicon/favicon-16x16.png' />
      <link rel='manifest' href='/favicon/site.webmanifest' />
    </>
  )
}

{/* Font preloads */}
<link rel='preload' href='/fonts/Satoshi-Variable.ttf' as='font' type='font/ttf' crossorigin />
<link
  rel='preload'
  href='/fonts/Satoshi-VariableItalic.ttf'
  as='font'
  type='font/ttf'
  crossorigin
/>

{/* Canonical URL */}
<link rel='canonical' href={canonicalURL} />

{/* Primary Meta Tags */}
<meta name='title' content={siteTitle} />
<meta name='description' content={plainDescription} />
<meta name='author' content={config.name} />

{/* Theme Color */}
<meta name='theme-color' content='' />

{/* Open Graph / Facebook */}
<meta property='og:type' content={articleDate ? 'article' : 'website'} />
<meta property='og:title' content={title} />
<meta property='og:description' content={plainDescription} />
<meta property='og:url' content={canonicalURL} />
<meta property='og:site_name' content={config.title} />
<meta property='og:locale' content={config.locale.attrs} />
<meta property='og:image' content={socialImageURL} />
<meta property='og:image:width' content='1200' />
<meta property='og:image:height' content='630' />
{
  articleDate && (
    <>
      <meta property='article:author' content={config.name} />
      <meta property='article:published_time' content={articleDate} />
    </>
  )
}

{/* Twitter */}
<meta property='twitter:card' content='summary_large_image' />
<meta property='twitter:url' content={canonicalURL} />
<meta property='twitter:title' content={title} />
<meta property='twitter:description' content={plainDescription} />
<meta property='twitter:image' content={socialImageURL} />

{/* Sitemap */}
<link rel='sitemap' href='/sitemap-index.xml' />

{/* RSS auto-discovery */}
<link
  rel='alternate'
  type='application/rss+xml'
  title={config.title}
  href={new URL('rss.xml', Astro.site).href}
/>

<meta name='generator' content={Astro.generator} />

{/* Styles */}
<link rel='stylesheet' href='/styles/global.css' />

{/* View transitions */}
<ClientRouter />
<!-- <script is:inline>
  const style = document.createElement('style')
  style.textContent = `* { transition: none !important; }`
  document.addEventListener('astro:after-swap', () => {
    document.head.appendChild(style)
    setTimeout(() => {
      style.remove()
    }, 100)
  })
</script> -->
